{"version":3,"sources":["Calculator.js","index.js"],"names":["Calculator","useState","count","setCount","firstVariable","setfirstVariable","secondVariable","setsecondVariable","className","onClick","undefined","slice","id","value","map","item","index","key","e","result","parseFloat","String","alert","indexOf","HandelAction","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1f662fc6.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport \"./CalculatorStyle.css\"\n\nconst Calculator = () => {\n  let [count, setCount] = useState();\n  let [firstVariable, setfirstVariable] = useState();\n  let [secondVariable, setsecondVariable] = useState();\n\n  const keys = [\n    {\n      id: 0,\n      value: \"7\"\n    },\n    {\n      id: 1,\n      value: \"8\"\n    },\n    {\n      id: 2,\n      value: \"9\"\n    },\n    {\n      id: 3,\n      value: \"/\"\n    },\n    {\n      id: 4,\n      value: \"4\"\n    },\n    {\n      id: 5,\n      value: \"5\"\n    },\n    {\n      id: 6,\n      value: \"6\"\n    },\n    {\n      id: 7,\n      value: \"x\"\n    },\n    {\n      id: 8,\n      value: \"1\"\n    },\n    {\n      id: 9,\n      value: \"2\"\n    },\n    {\n      id: 10,\n      value: \"3\"\n    },\n    {\n      id: 11,\n      value: \"-\"\n    },\n    {\n      id: 12,\n      value: \"0\"\n    },\n    {\n      id: 13,\n      value: \".\"\n    },\n    {\n      id: 14,\n      value: \"=\"\n    },\n    {\n      id: 15,\n      value: \"+\"\n    },\n  ]\n\n  const HandelAction = (e) => {\n    if (firstVariable === undefined)\n      if (e === \"=\" || e === \"+\" || e === \"x\" || e === \"/\" || e === \".\") {\n      }\n      else\n        setfirstVariable(e)\n    else {\n      if (e === \"+\" || e === \"-\" || e === \"x\" || e === \"/\") {\n        if (!secondVariable)\n          setCount(e)\n        if (firstVariable && secondVariable) {\n          if (count === \"+\") {\n            let result = (parseFloat(firstVariable) + parseFloat(secondVariable))\n            setfirstVariable(String(result))\n            setsecondVariable(undefined)\n            setCount(e)\n          }\n          if (count === \"-\") {\n            let result = (parseFloat(firstVariable) - parseFloat(secondVariable))\n            setfirstVariable(String(result))\n            setsecondVariable(undefined)\n            setCount(e)\n          }\n          if (count === \"x\") {\n            let result = (parseFloat(firstVariable) * parseFloat(secondVariable))\n            setfirstVariable(String(result))\n            setsecondVariable(undefined)\n            setCount(e)\n          }\n          if (count === \"/\") {\n            if (secondVariable !== \"0\") {\n              let result = (parseFloat(firstVariable) / parseFloat(secondVariable))\n              setfirstVariable(String(result))\n              setsecondVariable(undefined)\n              setCount(e)\n            }\n            else {\n              alert(\"Nie dzieli sie przez 0\")\n\n            }\n\n\n          }\n        }\n      }\n      else {\n        if (count) {\n          if (!secondVariable) {\n\n            if (e !== \"=\" && e !== \".\")\n              setsecondVariable(e)\n          }\n          else\n            if (e !== \"=\")\n              if (e === \".\") {\n                if (secondVariable.indexOf(\".\") === -1) {\n                  setsecondVariable(secondVariable += e)\n                }\n              } else\n                setsecondVariable(secondVariable += e)\n        }\n        else {\n          if (e !== \"=\")\n            if (e === \".\") {\n              if (firstVariable.indexOf(\".\") === -1) {\n                setfirstVariable(firstVariable += e)\n              }\n            } else\n              setfirstVariable(firstVariable += e)\n        }\n        if (firstVariable && secondVariable) {\n          if (e === \"=\") {\n            if (count === \"+\") {\n              let result = (parseFloat(firstVariable) + parseFloat(secondVariable))\n              setfirstVariable(String(result))\n\n            }\n            if (count === \"-\") {\n              let result = (parseFloat(firstVariable) - parseFloat(secondVariable))\n              setfirstVariable(String(result))\n\n            }\n            if (count === \"x\") {\n              let result = (parseFloat(firstVariable) * parseFloat(secondVariable))\n              setfirstVariable(String(result))\n\n            }\n            if (count === \"/\") {\n              if (secondVariable !== \"0\") {\n                let result = (parseFloat(firstVariable) / parseFloat(secondVariable))\n                setfirstVariable(String(result))\n              }\n              else {\n                alert(\"Nie dzieli sie przez 0\")\n\n              }\n\n            }\n\n            setsecondVariable(undefined)\n            setCount(undefined)\n          }\n\n        }\n      }\n    }\n  }\n\n  const handleBack = () => {\n    if (!secondVariable) {\n      if (!count) {\n        if (firstVariable) {\n          setfirstVariable(firstVariable.slice(0, -1))\n        }\n      }\n    }\n    if (count) {\n      if (!secondVariable) {\n        setCount(null)\n      }\n    }\n    if (secondVariable) {\n      setsecondVariable(secondVariable.slice(0, -1))\n    }\n  }\n\n  const handleClear = () => {\n    setfirstVariable(undefined)\n    setsecondVariable(undefined)\n    setCount(undefined)\n  }\n\n  return (\n    <div className=\"calculatorBackground\">\n      <div className=\"calculatorContainer\">\n        <div className=\"topScreen\" >\n          {firstVariable} {count} {secondVariable}\n        </div>\n        <div className=\"downScreen\" >\n          {secondVariable ? secondVariable : !firstVariable ? 0 : firstVariable}\n        </div>\n        <div className=\"buttonsContainer\">\n          <div className=\"clear\" onClick={() => handleClear()}>CLEAR</div>\n          <div className=\"back\" onClick={() => handleBack()}>BACK</div>\n        </div>\n        <div className=\"keysArea\">\n          {keys.map((item, index) =>\n            <div key={index} className=\"keys\" onClick={() => HandelAction(item.value)}>\n              <p >{item.value}</p>\n            </div>\n          )}\n\n        </div>\n      </div>\n    </div >\n  );\n}\n\nexport default Calculator;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Calculator from './Calculator';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Calculator />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}